// Generated by view binder compiler. Do not edit!
package com.learning.learningapp2022.ganeshhegde.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.learning.learningapp2022.ganeshhegde.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityEmployeeBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btnSubmit;

  @NonNull
  public final EditText editTextEmailAddress;

  @NonNull
  public final EditText editTextPersonName;

  @NonNull
  public final EditText editTextSalary;

  private ActivityEmployeeBinding(@NonNull ConstraintLayout rootView, @NonNull Button btnSubmit,
      @NonNull EditText editTextEmailAddress, @NonNull EditText editTextPersonName,
      @NonNull EditText editTextSalary) {
    this.rootView = rootView;
    this.btnSubmit = btnSubmit;
    this.editTextEmailAddress = editTextEmailAddress;
    this.editTextPersonName = editTextPersonName;
    this.editTextSalary = editTextSalary;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityEmployeeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityEmployeeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_employee, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityEmployeeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnSubmit;
      Button btnSubmit = ViewBindings.findChildViewById(rootView, id);
      if (btnSubmit == null) {
        break missingId;
      }

      id = R.id.editTextEmailAddress;
      EditText editTextEmailAddress = ViewBindings.findChildViewById(rootView, id);
      if (editTextEmailAddress == null) {
        break missingId;
      }

      id = R.id.editTextPersonName;
      EditText editTextPersonName = ViewBindings.findChildViewById(rootView, id);
      if (editTextPersonName == null) {
        break missingId;
      }

      id = R.id.editTextSalary;
      EditText editTextSalary = ViewBindings.findChildViewById(rootView, id);
      if (editTextSalary == null) {
        break missingId;
      }

      return new ActivityEmployeeBinding((ConstraintLayout) rootView, btnSubmit,
          editTextEmailAddress, editTextPersonName, editTextSalary);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
